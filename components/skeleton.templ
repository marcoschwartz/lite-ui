package components

// Skeleton - Loading placeholder with animation
// Usage:
//   @ui.SkeletonText("md", 3)  // 3 lines of text
//   @ui.SkeletonCircle("lg")   // Avatar placeholder
//   @ui.SkeletonBox("200px", "100px")  // Custom dimensions

// SkeletonText - Text skeleton with multiple lines
templ SkeletonText(size string, lines int) {
	<div class="animate-pulse space-y-3">
		for i := 0; i < lines; i++ {
			<div
				class={
					"rounded",
					templ.KV("h-4 bg-gray-200 dark:bg-gray-700", size == "md" || size == ""),
					templ.KV("h-3 bg-gray-200 dark:bg-gray-700", size == "sm"),
					templ.KV("h-5 bg-gray-200 dark:bg-gray-700", size == "lg"),
				}
				style={
					templ.SafeCSS("width: " + getLineWidth(i, lines)),
				}
			></div>
		}
	</div>
}

// SkeletonCircle - Circular skeleton (for avatars)
templ SkeletonCircle(size string) {
	<div class="animate-pulse">
		<div
			class={
				"rounded-full bg-gray-200 dark:bg-gray-700",
				templ.KV("w-10 h-10", size == "sm"),
				templ.KV("w-12 h-12", size == "md" || size == ""),
				templ.KV("w-16 h-16", size == "lg"),
				templ.KV("w-24 h-24", size == "xl"),
			}
		></div>
	</div>
}

// SkeletonBox - Rectangular skeleton with custom dimensions
templ SkeletonBox(width string, height string) {
	<div class="animate-pulse">
		<div
			class="rounded bg-gray-200 dark:bg-gray-700"
			style={ templ.SafeCSS("width: " + width + "; height: " + height) }
		></div>
	</div>
}

// SkeletonCard - Complete card skeleton
templ SkeletonCard() {
	<div class="animate-pulse bg-white dark:bg-gray-800 rounded-lg shadow-md p-6">
		<div class="flex items-center space-x-4 mb-4">
			<div class="rounded-full bg-gray-200 dark:bg-gray-700 h-12 w-12"></div>
			<div class="flex-1 space-y-2">
				<div class="h-4 bg-gray-200 dark:bg-gray-700 rounded w-3/4"></div>
				<div class="h-3 bg-gray-200 dark:bg-gray-700 rounded w-1/2"></div>
			</div>
		</div>
		<div class="space-y-3">
			<div class="h-4 bg-gray-200 dark:bg-gray-700 rounded"></div>
			<div class="h-4 bg-gray-200 dark:bg-gray-700 rounded"></div>
			<div class="h-4 bg-gray-200 dark:bg-gray-700 rounded w-5/6"></div>
		</div>
	</div>
}

// SkeletonTable - Table skeleton
templ SkeletonTable(rows int) {
	<div class="animate-pulse">
		<div class="border border-gray-200 dark:border-gray-700 rounded-lg overflow-hidden">
			<!-- Header -->
			<div class="bg-gray-50 dark:bg-gray-900 p-4 border-b border-gray-200 dark:border-gray-700">
				<div class="flex gap-4">
					<div class="h-4 bg-gray-200 dark:bg-gray-700 rounded w-1/4"></div>
					<div class="h-4 bg-gray-200 dark:bg-gray-700 rounded w-1/4"></div>
					<div class="h-4 bg-gray-200 dark:bg-gray-700 rounded w-1/4"></div>
					<div class="h-4 bg-gray-200 dark:bg-gray-700 rounded w-1/4"></div>
				</div>
			</div>
			<!-- Rows -->
			for i := 0; i < rows; i++ {
				<div class="p-4 border-b border-gray-200 dark:border-gray-700">
					<div class="flex gap-4">
						<div class="h-4 bg-gray-200 dark:bg-gray-700 rounded w-1/4"></div>
						<div class="h-4 bg-gray-200 dark:bg-gray-700 rounded w-1/4"></div>
						<div class="h-4 bg-gray-200 dark:bg-gray-700 rounded w-1/4"></div>
						<div class="h-4 bg-gray-200 dark:bg-gray-700 rounded w-1/4"></div>
					</div>
				</div>
			}
		</div>
	</div>
}

// Helper function to vary line widths for more realistic skeleton
func getLineWidth(index int, total int) string {
	if index == total-1 {
		return "75%" // Last line shorter
	}
	if index%3 == 0 {
		return "90%"
	}
	return "100%"
}
