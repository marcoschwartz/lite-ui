package components

import "fmt"

// Select - Custom select component with Alpine.js and Tailwind
templ Select(label string, name string, placeholder string, required bool, options []SelectOption) {
	<div>
		if label != "" {
			<label for={ name } class="block text-sm font-medium text-gray-700 dark:text-gray-300 mb-1">
				{ label }
				if required {
					<span class="text-red-500">*</span>
				}
			</label>
		}

		<div
			x-data="{
				open: false,
				selected: '',
				selectedLabel: ''
			}"
			@click.away="open = false"
			class="relative"
		>
			<!-- Hidden input for form submission -->
			<input type="hidden" name={ name } x-model="selected" if required { required }/>

			<!-- Custom Select Button -->
			<button
				type="button"
				@click="open = !open"
				class="relative w-full cursor-pointer rounded-md bg-white dark:bg-gray-700 py-2.5 pl-3 pr-10 text-left text-gray-900 dark:text-gray-100 shadow-sm ring-1 ring-inset ring-gray-300 dark:ring-gray-600 focus:outline-none focus:ring-2 focus:ring-indigo-500 sm:text-sm transition-all hover:ring-gray-400 dark:hover:ring-gray-500"
			>
				<span
					class="block truncate"
					x-text={ fmt.Sprintf("selectedLabel || '%s'", placeholder) }
					:class="{ 'text-gray-400 dark:text-gray-500': !selectedLabel }"
				>
				</span>
				<span class="pointer-events-none absolute inset-y-0 right-0 flex items-center pr-2">
					<svg
						class="h-5 w-5 text-gray-400 dark:text-gray-500 transition-transform"
						:class="{ 'rotate-180': open }"
						viewBox="0 0 20 20"
						fill="currentColor"
					>
						<path fill-rule="evenodd" d="M10 3a.75.75 0 01.55.24l3.25 3.5a.75.75 0 11-1.1 1.02L10 4.852 7.3 7.76a.75.75 0 01-1.1-1.02l3.25-3.5A.75.75 0 0110 3zm-3.76 9.2a.75.75 0 011.06.04l2.7 2.908 2.7-2.908a.75.75 0 111.1 1.02l-3.25 3.5a.75.75 0 01-1.1 0l-3.25-3.5a.75.75 0 01.04-1.06z" clip-rule="evenodd"/>
					</svg>
				</span>
			</button>

			<!-- Dropdown Options -->
			<div
				x-cloak
				x-show="open"
				x-transition:enter="transition ease-out duration-100"
				x-transition:enter-start="opacity-0 scale-95"
				x-transition:enter-end="opacity-100 scale-100"
				x-transition:leave="transition ease-in duration-75"
				x-transition:leave-start="opacity-100 scale-100"
				x-transition:leave-end="opacity-0 scale-95"
				class="absolute z-[60] mt-1 max-h-60 w-full overflow-auto rounded-md bg-white dark:bg-gray-700 py-1 text-base shadow-lg ring-1 ring-black dark:ring-gray-600 ring-opacity-5 focus:outline-none sm:text-sm"
			>
				@SelectOptions(options)
			</div>
		</div>
	</div>
}

// SelectOptions renders the list of options
templ SelectOptions(options []SelectOption) {
	for _, option := range options {
		@SelectOptionItem(option)
	}
}

// SelectOptionItem renders a single option
templ SelectOptionItem(option SelectOption) {
	<div
		@click={ fmt.Sprintf("selected = '%s'; selectedLabel = '%s'; open = false", option.Value, option.Label) }
		:class={ fmt.Sprintf("{ 'bg-indigo-600 text-white': selected === '%s', 'text-gray-900 dark:text-gray-100': selected !== '%s' }", option.Value, option.Value) }
		class="relative cursor-pointer select-none py-2 pl-3 pr-9 hover:bg-indigo-50 dark:hover:bg-gray-600 transition-colors"
	>
		<span
			:class={ fmt.Sprintf("{ 'font-semibold': selected === '%s', 'font-normal': selected !== '%s' }", option.Value, option.Value) }
			class="block truncate"
		>
			{ option.Label }
		</span>

		<!-- Checkmark icon for selected option -->
		<span
			x-show={ fmt.Sprintf("selected === '%s'", option.Value) }
			:class={ fmt.Sprintf("{ 'text-white': selected === '%s', 'text-indigo-400': selected !== '%s' }", option.Value, option.Value) }
			class="absolute inset-y-0 right-0 flex items-center pr-4"
		>
			<svg class="h-5 w-5" viewBox="0 0 20 20" fill="currentColor">
				<path fill-rule="evenodd" d="M16.704 4.153a.75.75 0 01.143 1.052l-8 10.5a.75.75 0 01-1.127.075l-4.5-4.5a.75.75 0 011.06-1.06l3.894 3.893 7.48-9.817a.75.75 0 011.05-.143z" clip-rule="evenodd"/>
			</svg>
		</span>
	</div>
}

// SelectOption represents an option in a select dropdown
type SelectOption struct {
	Value string
	Label string
}
