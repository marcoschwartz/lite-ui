package components

// ListItem - Single item in a list
type ListItem struct {
	Content  templ.Component
	Icon     templ.Component // Optional icon
	Active   bool            // Highlight as active
	Disabled bool            // Disabled state
	Href     string          // Optional link
}

// List - Styled list component
// Usage:
//   @ui.List(items, "default")  // default, bordered, divided
templ List(items []ListItem, variant string) {
	<ul
		class="w-full"
		class={ templ.KV("divide-y divide-gray-200 dark:divide-gray-700", variant == "divided") }
		class={ templ.KV("border border-gray-200 dark:border-gray-700 rounded-lg", variant == "bordered") }
	>
		for _, item := range items {
			<li
				class={ templ.KV("border-b border-gray-200 dark:border-gray-700 last:border-0", variant == "bordered") }
			>
				if item.Href != "" && !item.Disabled {
					<a
						href={ templ.URL(item.Href) }
						class="flex items-center gap-3 px-4 py-3 transition-colors"
						class={ templ.KV("hover:bg-gray-50 dark:hover:bg-gray-800", !item.Disabled) }
						class={ templ.KV("bg-indigo-50 dark:bg-indigo-900/20", item.Active) }
						class={ templ.KV("opacity-50 cursor-not-allowed", item.Disabled) }
					>
						if item.Icon != nil {
							<div class="flex-shrink-0">
								@item.Icon
							</div>
						}
						<div class="flex-1 min-w-0">
							@item.Content
						</div>
					</a>
				} else {
					<div
						class="flex items-center gap-3 px-4 py-3"
						class={ templ.KV("bg-indigo-50 dark:bg-indigo-900/20", item.Active) }
						class={ templ.KV("opacity-50 cursor-not-allowed", item.Disabled) }
					>
						if item.Icon != nil {
							<div class="flex-shrink-0">
								@item.Icon
							</div>
						}
						<div class="flex-1 min-w-0">
							@item.Content
						</div>
					</div>
				}
			</li>
		}
	</ul>
}
