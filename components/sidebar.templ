package components

import (
	"strconv"
)

// Project represents a project for the sidebar selector
type Project struct {
	ID   int
	Name string
	Slug string
}

// SidebarItem is an alias for MenuItem for backward compatibility
type SidebarItem = MenuItem

// Sidebar - Responsive sidebar component
// Desktop: Fixed sidebar on the left
// Mobile: Collapsible drawer
templ Sidebar(items []SidebarItem, userName string, userEmail string, userAvatar string, currentProject Project, projects []Project) {
	<div x-data="{ mobileOpen: false }" @resize.window="if (window.innerWidth >= 1024) mobileOpen = false">
		<!-- Mobile Menu Button -->
		<div class="lg:hidden fixed top-4 left-4 z-50">
			<button
				@click="mobileOpen = !mobileOpen"
				class="p-2 rounded-md bg-white dark:bg-gray-800 text-gray-700 dark:text-gray-200 shadow-lg border border-gray-200 dark:border-gray-700 hover:bg-gray-50 dark:hover:bg-gray-700 transition-colors"
			>
				@IconMenu()
			</button>
		</div>

		<!-- Mobile Sidebar (Drawer) -->
		<div x-show="mobileOpen" class="lg:hidden">
			<!-- Overlay -->
			<div
				x-cloak
				x-show="mobileOpen"
				x-transition:enter="transition-opacity ease-linear duration-300"
				x-transition:enter-start="opacity-0"
				x-transition:enter-end="opacity-100"
				x-transition:leave="transition-opacity ease-linear duration-300"
				x-transition:leave-start="opacity-100"
				x-transition:leave-end="opacity-0"
				class="fixed inset-0 bg-black/50 backdrop-blur-sm z-40"
				@click="mobileOpen = false"
			></div>

			<!-- Drawer Panel -->
			<div
				x-cloak
				x-show="mobileOpen"
				x-transition:enter="transition ease-in-out duration-300 transform"
				x-transition:enter-start="-translate-x-full"
				x-transition:enter-end="translate-x-0"
				x-transition:leave="transition ease-in-out duration-300 transform"
				x-transition:leave-start="translate-x-0"
				x-transition:leave-end="-translate-x-full"
				class="fixed inset-y-0 left-0 z-50 w-64 bg-white dark:bg-gray-800 shadow-xl border-r border-gray-200 dark:border-gray-700"
			>
				@SidebarContent(items, true, userName, userEmail, userAvatar)
			</div>
		</div>

		<!-- Desktop Sidebar -->
		<aside class="hidden lg:block fixed inset-y-0 left-0 w-64 bg-white dark:bg-gray-800 border-r border-gray-200 dark:border-gray-700 z-30">
			@SidebarContent(items, false, userName, userEmail, userAvatar)
		</aside>
	</div>
}

// SidebarContent - The actual sidebar content (shared between mobile and desktop)
templ SidebarContent(items []SidebarItem, isMobile bool, userName string, userEmail string, userAvatar string) {
	<div class="flex flex-col h-full">
		<!-- Logo/Header -->
		<div class="px-6 py-4 border-b border-gray-200 dark:border-gray-700">
			<div class="flex items-center justify-between">
				<div class="flex items-center gap-2">
					<h1 class="text-2xl font-bold text-indigo-600 dark:text-indigo-400">Lite UI</h1>
					<span class="text-xs px-2 py-1 bg-indigo-100 dark:bg-indigo-900 text-indigo-600 dark:text-indigo-400 rounded-full font-semibold">DEMO</span>
				</div>
				if isMobile {
					<button
						@click="mobileOpen = false"
						class="text-gray-400 dark:text-gray-500 hover:text-gray-500 dark:hover:text-gray-400 transition-colors lg:hidden"
					>
						<svg class="w-6 h-6" fill="none" stroke="currentColor" viewBox="0 0 24 24">
							<path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M6 18L18 6M6 6l12 12"></path>
						</svg>
					</button>
				}
			</div>
		</div>
		<!-- Navigation Items -->
		<nav class="flex-1 px-4 py-6 overflow-y-auto"
			if isMobile {
				@click="mobileOpen = false"
			}
		>
			@Menu(items, "vertical")
		</nav>

		<!-- Footer (optional) -->
		<div class="px-4 py-4 border-t border-gray-200 dark:border-gray-700">
			<div class="flex items-center gap-3 px-4 py-2">
				@Avatar(userAvatar, userName, "sm")
				<div class="flex-1 min-w-0">
					<p class="text-sm font-medium text-gray-900 dark:text-gray-100 truncate">{ userName }</p>
					<p class="text-xs text-gray-500 dark:text-gray-400 truncate">{ userEmail }</p>
				</div>
			</div>
		</div>
	</div>
}

// ProjectSelector - Dropdown to switch between projects
templ ProjectSelector(currentProject Project, projects []Project) {
	<div x-data="{ open: false }" class="relative">
		<label class="block text-xs font-medium text-gray-500 dark:text-gray-400 mb-2">Current Project</label>
		<button
			@click="open = !open"
			class="w-full flex items-center justify-between px-3 py-2 text-sm bg-gray-50 dark:bg-gray-900 border border-gray-200 dark:border-gray-700 rounded-lg hover:bg-gray-100 dark:hover:bg-gray-800 transition-colors"
		>
			<div class="flex items-center gap-2 min-w-0">
				<svg class="w-4 h-4 text-gray-400 dark:text-gray-500 flex-shrink-0" fill="none" stroke="currentColor" viewBox="0 0 24 24">
					<path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M3 7v10a2 2 0 002 2h14a2 2 0 002-2V9a2 2 0 00-2-2h-6l-2-2H5a2 2 0 00-2 2z"></path>
				</svg>
				<span class="font-medium text-gray-900 dark:text-gray-100 truncate">{ currentProject.Name }</span>
			</div>
			<svg class="w-4 h-4 text-gray-400 dark:text-gray-500 flex-shrink-0" fill="none" stroke="currentColor" viewBox="0 0 24 24">
				<path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M19 9l-7 7-7-7"></path>
			</svg>
		</button>
		<!-- Dropdown Menu -->
		<div
			x-show="open"
			@click.away="open = false"
			x-cloak
			x-transition:enter="transition ease-out duration-100"
			x-transition:enter-start="opacity-0 scale-95"
			x-transition:enter-end="opacity-100 scale-100"
			x-transition:leave="transition ease-in duration-75"
			x-transition:leave-start="opacity-100 scale-100"
			x-transition:leave-end="opacity-0 scale-95"
			class="absolute z-50 w-full mt-1 bg-white dark:bg-gray-800 border border-gray-200 dark:border-gray-700 rounded-lg shadow-lg max-h-60 overflow-y-auto"
		>
			for _, project := range projects {
				<a
					hx-get={ "/switch-project?id=" + strconv.Itoa(project.ID) }
				hx-target="body"
				hx-swap="outerHTML transition:true"
					@click="open = false"
					class={
						"flex items-center gap-2 px-3 py-2 text-sm hover:bg-gray-50 dark:hover:bg-gray-700 transition-colors",
						templ.KV("bg-indigo-50 dark:bg-indigo-900/30 text-indigo-600 dark:text-indigo-400", project.ID == currentProject.ID),
						templ.KV("text-gray-700 dark:text-gray-300", project.ID != currentProject.ID),
					}
				>
					<svg class="w-4 h-4 flex-shrink-0" fill="none" stroke="currentColor" viewBox="0 0 24 24">
						<path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M3 7v10a2 2 0 002 2h14a2 2 0 002-2V9a2 2 0 00-2-2h-6l-2-2H5a2 2 0 00-2 2z"></path>
					</svg>
					<span class="truncate">{ project.Name }</span>
					if project.ID == currentProject.ID {
						<svg class="w-4 h-4 ml-auto flex-shrink-0" fill="currentColor" viewBox="0 0 20 20">
							<path fill-rule="evenodd" d="M16.707 5.293a1 1 0 010 1.414l-8 8a1 1 0 01-1.414 0l-4-4a1 1 0 011.414-1.414L8 12.586l7.293-7.293a1 1 0 011.414 0z" clip-rule="evenodd"></path>
						</svg>
					}
				</a>
			}
		</div>
	</div>
}
